/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace HealthcareSystem {
  export type PrescriptionStruct = {
    diagnosis: string;
    medication: string;
    dosage: string;
    notes: string;
    timestamp: BigNumberish;
    hospital: string;
  };

  export type PrescriptionStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    string
  ] & {
    diagnosis: string;
    medication: string;
    dosage: string;
    notes: string;
    timestamp: BigNumber;
    hospital: string;
  };
}

export interface HealthcareSystemInterface extends utils.Interface {
  functions: {
    "addPrescription(string,string,string,string,string)": FunctionFragment;
    "getHealthCoins(string)": FunctionFragment;
    "getPrescriptions(string)": FunctionFragment;
    "healthCoins(string)": FunctionFragment;
    "prescriptions(string,uint256)": FunctionFragment;
    "redeemHealthCoins(string,uint256)": FunctionFragment;
    "registerHospital(address)": FunctionFragment;
    "registeredHospitals(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addPrescription"
      | "getHealthCoins"
      | "getPrescriptions"
      | "healthCoins"
      | "prescriptions"
      | "redeemHealthCoins"
      | "registerHospital"
      | "registeredHospitals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addPrescription",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getHealthCoins",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrescriptions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "healthCoins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "prescriptions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemHealthCoins",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerHospital",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredHospitals",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPrescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHealthCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrescriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "healthCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prescriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemHealthCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerHospital",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredHospitals",
    data: BytesLike
  ): Result;

  events: {
    "HealthCoinsAwarded(string,uint256)": EventFragment;
    "HealthCoinsRedeemed(string,uint256)": EventFragment;
    "PrescriptionAdded(string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HealthCoinsAwarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HealthCoinsRedeemed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PrescriptionAdded"): EventFragment;
}

export interface HealthCoinsAwardedEventObject {
  aadharNumber: string;
  amount: BigNumber;
}
export type HealthCoinsAwardedEvent = TypedEvent<
  [string, BigNumber],
  HealthCoinsAwardedEventObject
>;

export type HealthCoinsAwardedEventFilter =
  TypedEventFilter<HealthCoinsAwardedEvent>;

export interface HealthCoinsRedeemedEventObject {
  aadharNumber: string;
  amount: BigNumber;
}
export type HealthCoinsRedeemedEvent = TypedEvent<
  [string, BigNumber],
  HealthCoinsRedeemedEventObject
>;

export type HealthCoinsRedeemedEventFilter =
  TypedEventFilter<HealthCoinsRedeemedEvent>;

export interface PrescriptionAddedEventObject {
  aadharNumber: string;
  hospital: string;
}
export type PrescriptionAddedEvent = TypedEvent<
  [string, string],
  PrescriptionAddedEventObject
>;

export type PrescriptionAddedEventFilter =
  TypedEventFilter<PrescriptionAddedEvent>;

export interface HealthcareSystem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HealthcareSystemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addPrescription(
      _aadharNumber: string,
      _diagnosis: string,
      _medication: string,
      _dosage: string,
      _notes: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getHealthCoins(
      _aadharNumber: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrescriptions(
      _aadharNumber: string,
      overrides?: CallOverrides
    ): Promise<[HealthcareSystem.PrescriptionStructOutput[]]>;

    healthCoins(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    prescriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, string] & {
        diagnosis: string;
        medication: string;
        dosage: string;
        notes: string;
        timestamp: BigNumber;
        hospital: string;
      }
    >;

    redeemHealthCoins(
      _aadharNumber: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registerHospital(
      _hospital: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    registeredHospitals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addPrescription(
    _aadharNumber: string,
    _diagnosis: string,
    _medication: string,
    _dosage: string,
    _notes: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getHealthCoins(
    _aadharNumber: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrescriptions(
    _aadharNumber: string,
    overrides?: CallOverrides
  ): Promise<HealthcareSystem.PrescriptionStructOutput[]>;

  healthCoins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  prescriptions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber, string] & {
      diagnosis: string;
      medication: string;
      dosage: string;
      notes: string;
      timestamp: BigNumber;
      hospital: string;
    }
  >;

  redeemHealthCoins(
    _aadharNumber: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registerHospital(
    _hospital: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  registeredHospitals(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addPrescription(
      _aadharNumber: string,
      _diagnosis: string,
      _medication: string,
      _dosage: string,
      _notes: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getHealthCoins(
      _aadharNumber: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrescriptions(
      _aadharNumber: string,
      overrides?: CallOverrides
    ): Promise<HealthcareSystem.PrescriptionStructOutput[]>;

    healthCoins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    prescriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber, string] & {
        diagnosis: string;
        medication: string;
        dosage: string;
        notes: string;
        timestamp: BigNumber;
        hospital: string;
      }
    >;

    redeemHealthCoins(
      _aadharNumber: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerHospital(
      _hospital: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredHospitals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "HealthCoinsAwarded(string,uint256)"(
      aadharNumber?: string | null,
      amount?: null
    ): HealthCoinsAwardedEventFilter;
    HealthCoinsAwarded(
      aadharNumber?: string | null,
      amount?: null
    ): HealthCoinsAwardedEventFilter;

    "HealthCoinsRedeemed(string,uint256)"(
      aadharNumber?: string | null,
      amount?: null
    ): HealthCoinsRedeemedEventFilter;
    HealthCoinsRedeemed(
      aadharNumber?: string | null,
      amount?: null
    ): HealthCoinsRedeemedEventFilter;

    "PrescriptionAdded(string,address)"(
      aadharNumber?: string | null,
      hospital?: null
    ): PrescriptionAddedEventFilter;
    PrescriptionAdded(
      aadharNumber?: string | null,
      hospital?: null
    ): PrescriptionAddedEventFilter;
  };

  estimateGas: {
    addPrescription(
      _aadharNumber: string,
      _diagnosis: string,
      _medication: string,
      _dosage: string,
      _notes: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getHealthCoins(
      _aadharNumber: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrescriptions(
      _aadharNumber: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    healthCoins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    prescriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemHealthCoins(
      _aadharNumber: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registerHospital(
      _hospital: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    registeredHospitals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPrescription(
      _aadharNumber: string,
      _diagnosis: string,
      _medication: string,
      _dosage: string,
      _notes: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getHealthCoins(
      _aadharNumber: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrescriptions(
      _aadharNumber: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    healthCoins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prescriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemHealthCoins(
      _aadharNumber: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registerHospital(
      _hospital: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    registeredHospitals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
